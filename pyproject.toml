[build-system]
requires = [
    "setuptools >= 77.0.0", # license and license-files alignment
]
build-backend = "setuptools.build_meta"

[project]
name = "ansibug"
description = "Ansible Debug Adapter Protocol Implementation"
readme = "README.md"
requires-python = ">=3.10"
license = "MIT"
license-files = ["LICENSE"]
authors = [{ name = "Jordan Borean", email = "jborean93@gmail.com" }]
keywords = ["ansible", "debug", "lsp", "dap"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]
dynamic = ["version"]

[project.urls]
homepage = "https://github.com/jborean93/ansibug"

[project.optional-dependencies]
dev = [
    "ansible-core >= 2.16.0",
    "argcomplete",
    # Support for source_pkgs
    "coverage[toml] >= 5.3",
    "cryptography",
    "black == 24.10.0",
    "isort == 5.13.2",
    "mypy == 1.13.0",
    "pre-commit",
    "pytest",
    "pytest-timeout",
    "pytest-xdist",
    "tox >= 4.0.0",
]

[tool.setuptools]
include-package-data = true

[tool.setuptools.dynamic]
version = { attr = "ansibug._version.__version__" }

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
ansibug = ["py.typed"]

[tool.black]
line-length = 120
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"

[tool.mypy]
exclude = "docs/|build/"
mypy_path = "$MYPY_CONFIG_FILE_DIR/src:$MYPY_CONFIG_FILE_DIR/tests/utils"
python_version = "3.9"
explicit_package_bases = true
show_error_codes = true
show_column_numbers = true
# disallow_any_unimported = true  # Ansible doesn't have much annotation
disallow_untyped_calls = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_reexport = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true

[[tool.mypy.overrides]]
module = "ansible.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "debugpy.*"
ignore_missing_imports = true

[tool.pytest.ini_options]
addopts = "--import-mode=importlib"
testpaths = "tests"
junit_family = "xunit2"
# A test taking longer than a minute is a problem and sign of a deadlock
timeout = 60
# pytest-xdist doesn't play nice with signals so use the thread method
timeout_method = "thread"

[tool.coverage.paths]
source = ["src", ".tox/py*/**/site-packages"]

[tool.coverage.run]
branch = true
# Needed as tests run with a different cwd, env is set in tox
data_file = "${PROJECT_ROOT}/.coverage"
# Ansible's collection loader does funny things with collection coverage. The
# data is collected but it'll still warn so disable the warnings.
disable_warnings = ["module-not-imported", "no-data-collected"]
source_pkgs = ["ansibug", "ansible_collections.ansibug.dap"]
omit = ["*/ansibug/_version.py"]
parallel = true

[tool.coverage.report]
skip_covered = true
show_missing = true

[tool.tox]
legacy_tox_ini = """
[tox]
env_list =
    sanity
    py3{10,11,12}-ansible_2.16-tests
    py3{10,11,12}-ansible_2.17-tests
    py3{11,12,13}-ansible_2.18-tests
    py3{11,12,13}-ansible_devel-tests
min_version = 4.0

[testenv]
package = wheel
wheel_build_env = .pkg

extras =
    dev
deps:
    ansible_2.16: ansible-core >=2.16.0,<2.17.0
    ansible_2.17: ansible-core >=2.17.0,<2.18.0
    ansible_2.18: ansible-core >=2.18.0,<2.19.0
    ansible_devel: https://github.com/ansible/ansible/archive/devel.tar.gz
install_command = python -Im pip install --no-compile {opts} {packages}

passenv =
    GITHUB_ACTIONS
    PYTEST_ADDOPTS
set_env =
    # Needed for testing coverage
    tests: COVERAGE_PROCESS_START={toxinidir}/pyproject.toml
    tests: PROJECT_ROOT={toxinidir}

commands_pre =
    tests: python -c 'import pathlib; pathlib.Path("{env_site_packages_dir}/cov.pth").write_text("import coverage; coverage.process_startup()")'

commands =
    sanity: python -m black . --check
    sanity: python -m isort . --check-only
    sanity: python -m mypy .

    tests: python -m ansible adhoc --version
    tests: python -m coverage run -m pytest -v {posargs:-n auto}

commands_post =
    tests: python -m coverage combine --quiet
    tests: python -m coverage report
    tests: python -m coverage xml
"""
